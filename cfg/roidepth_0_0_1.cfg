
[net]
# Testing
#batch=1
#subdivisions=1
# Training
batch=16
subdivisions=1
width=128
height=128
channels=3
momentum=0.9
decay=0.0005
angle=0
saturation = 1.5
exposure = 1.5
hue=.1

learning_rate=0.001
burn_in=1000
max_batches = 500200
policy=steps
steps=400000,450000
scales=.1,.1

############################DownSample###############################
#0
[convolutional]
filters=8
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(128,128,8)

#1
[maxpool]
size=2
stride=2
#out_size=(64,64,8)

#2
[convolutional]
filters=8
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(64,64,8)

#3
[maxpool]
size=2
stride=2
#out_size=(32,32,8)

############################Residual###############################
#4
[convolutional]
filters=32
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(32,32,32)

#5
[convolutional]
filters=32
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(32,32,32)

#6
[shortcut]
from=-2
activation=linear
#out_size=(32,32,32)

#7
[convolutional]
filters=48
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(16,16,48)

#8
[convolutional]
filters=48
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(16,16,48)

#9
[shortcut]
from=-2
activation=linear 
#out_size=(16,16,48)

#10
[convolutional]
filters=64
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(8,8,64)

#11
[convolutional]
filters=64
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(8,8,64)

#12
[shortcut]
from=-2
activation=linear
#out_size=(8,8,64) 

#13
[convolutional]
filters=128
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(4,4,128)

#14
[convolutional]
filters=128
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(4,4,128)

#15
[shortcut]
from=-2
activation=linear
#out_size=(4,4,128)

#16
[convolutional]
filters=96
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(2,2,96)

#17
[convolutional]
filters=96
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(2,2,96)

#18
[shortcut]
from=-2
activation=linear
#out_size=(2,2,96)

############################UpSample###############################
#19
[route]
layers=15
#out_size=(4,4,128)

#20
[upsample]
stride=4
#out_size=(16,16,128)

#21
[route]
layers=9,20
#out_size=(16,16,176)

#22
[convolutional]
filters=32
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(16,16,32)

#23
[upsample]
stride=2
#out_size=(32,32,32)

#24
[route]
layers=6,23
#out_size=(32,32,64)

############################Depth###############################
#25
[convolutional]
filters=48
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(32,32,48)

#26
[convolutional]
filters=32
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(16,16,32)

#27
[roiinfo]
#out_size=(16,16,36)

#28
[convolutional]
filters=32
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(8,8,32)

#29
[convolutional]
filters=16
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(4,4,16)

#30
[convolutional]
filters=8
size=3
stride=2
pad=1
batch_normalize=1
activation=leaky
#out_size=(2,2,8)

############################Depth Regression Output###############################
#31
[flatten]
#out_size=(1,32)

#32
[roidepth]
input = 32
output=1
#out_size=(1,1)

############################YOLO Detection Output###############################

#33
[route]
layers=18
#out_size=(2,2,96)

#34
[convolutional]
filters=64
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(2,2,64)

#35
[convolutional]
filters=45
size=3
stride=1
pad=1
batch_normalize=1
activation=leaky
#out_size=(2,2,45)

#36
[yolo]
stride=64
mask=0,1,2,3,4
anchors=5,7, 10,14, 15,21, 23,27, 37,58
classes=4
num=5
jitter=.2
ignore_thresh = .7
truth_thresh = 1
random=1
